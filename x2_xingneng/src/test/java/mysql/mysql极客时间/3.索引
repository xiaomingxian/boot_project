常见数据结构：
    哈希表：等值匹配,不适于范围查询(计算出来的hash值不是递增的)
    有序数组:hash值有序(二分查找复杂度O(log(N))) 不适用于 数据更新(需要大量更新后面数据的位置，成本太大),有序数组索引只适用于静态存储引擎
    搜索树:

联合索引的需要考虑的:
    1.字段的复用程度  程度高的放前面
    2.字段的大小    index_a_b  假如b大 要查询b单独查询b时联合索引就不生效就得单独创建b索引(b大浪费空间【所以把创建成index_b_a】)

索引下推:
    在 MySQL 5.6 之前，只能从 ID3 开始一个个回表。到主键索引上找出数据行，再对比字段值。
    而 MySQL 5.6  引入的索引下推优化（ index condition pushdown) ， 可以在索引遍历过程中，对索
        引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。

重建索引(普通索引k,主键索引)
    重建索引 k 的做法是合理的，可以达到省空间的目的。
    但是，重建主键的过程不合理。不论是删除主键还是创建主键，都会将整个表重建。
    所以连着执行这两个语句的话，第一个语句就白做了。
    这两个语句，你可以用这个语句代替 ： alter table T engine=InnoDB 。

